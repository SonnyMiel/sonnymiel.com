version: 2.1

###### FILTERS ######
release_only: &release_only
  filters:
    tags:
      only: /.*@.*/
    branches:
      ignore: /.*/

staging_only: &staging_only
  filters:
    tags: 
      ignore: /.*/
          
###### ANCHORS ######
parse_tag: &parse_tag
  - run: |
      echo "export APP=$(echo $CIRCLE_TAG | cut -d'@' -f1)" >> $BASH_ENV
      echo "export VERSION=$(echo $CIRCLE_TAG | cut -d'@' -f2)" >> $BASH_ENV

setup_base: &setup_base
  - run: |
      if [ $CIRCLE_BRANCH = "main" ]; then
        echo "export BASE=remotes/origin/main~1" >> $BASH_ENV
      else 
        echo "export BASE=remotes/origin/main" >> $BASH_ENV
      fi

workflows:
  staging:
    jobs:
      - install_dependencies
      - build_affected: 
          <<: *staging_only
          requires:
            - install_dependencies
      - package_affected:
          <<: *staging_only
          requires:
            - build_affected
  production:
    jobs:
      - install_dependencies:
          <<: *release_only
      - build_release:
          <<: *release_only
          requires:
            - install_dependencies
      - package_release:
          <<: *release_only
          requires:
            - build_release

jobs:
  install_dependencies:
    docker:
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run: yarn set version berry
      - run: yarn
      - save_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/

  build_affected:
    docker:
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - <<: *setup_base
      - restore_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ./
      - run: yarn set version berry
      - run: yarn run affected:lint --base=$BASE
      - run: yarn run affected:build --base=$BASE --prod --no-progress --skip-nx-cache
      - save_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - persist_to_workspace:
          root: ./
          paths:
            - dist/*

  build_release:
    docker:
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - <<: *parse_tag
      - restore_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run: yarn set version berry
      - run: yarn run nx lint $APP
      - run: yarn run nx build $APP --prod --no-progress --skip-nx-cache
      - save_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - persist_to_workspace:
          root: ./
          paths:
            - dist/*

  package_affected:
    docker: 
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ./
      - <<: *setup_base
      - setup_remote_docker: 
          version: 19.03.13
          docker_layer_caching: false
      - run: echo $GITHUB_CONTAINER_PAT | docker login $GITHUB_CONTAINER_URL -u $GITHUB_USERNAME --password-stdin 
      - run: yarn run affected:docker --base=$BASE

  package_release:
    docker: 
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{.Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ./
      - <<: *parse_tag
      - setup_remote_docker: 
          version: 19.03.13
          docker_layer_caching: false
      - run: echo $GITHUB_CONTAINER_PAT | docker login $GITHUB_CONTAINER_URL -u $GITHUB_USERNAME --password-stdin 
      - run: yarn run nx -- run $APP:docker --version=$VERSION
