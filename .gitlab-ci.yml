stages:
  - build
  - test
  # - package
  # - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: '/certs'

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .yarn/cache/
    - ./.pnp.js

.setup-base: &setup-base
  - |
    if [ $CI_COMMIT_BRANCH == "main" ]; then
      BASE=origin/main~1
    else 
      BASE=origin/main
    fi

.parse-tag: &parse-tag
  - |
    APP=$(echo $CI_COMMIT_TAG | cut -d'@' -f1)
    VERSION=$(echo $CI_COMMIT_TAG | cut -d'@' -f2)

.docker-package-management:
  image: docker:19.03.0
  stage: package
  services:
    - docker:19.03.0-dind
  tags:
    - docker
  before_script:
    - apk update
    - apk add git
    - apk add --update nodejs npm
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.ssh_management:
  image: alpine:latest
  stage: deploy
  before_script:
  - 'which ssh-agent || ( apk update  && apk add openssh-client git )'
  - apk add --update nodejs npm
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -p "$VPS_PORT" "$VPS_IP" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

build:
  stage: build
  image: alpine
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG == null
      when: always
  script:
    - *setup-base
    - apk update
    - apk add git python3 
    - apk add --update nodejs npm
    - npm install -g yarn
    - yarn set version berry
    - ln -sf python3 /usr/bin/python
    - git fetch --all
    - yarn
    - yarn run affected:lint --base=$BASE 
    - yarn run affected:build --base=$BASE --prod --no-progress --skip-nx-cache
  artifacts:
    expire_in: 1 hour
    when: always
    paths:
      - 'dist/*'

build:release:
  stage: build
  image: alpine
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always    
  script:
    - *parse-tag
    - apk update
    - apk add git python3 
    - apk add --update nodejs npm
    - npm install -g yarn
    - yarn set version berry
    - ln -sf python3 /usr/bin/python
    - yarn
    - yarn run nx lint $APP
    - yarn run nx build $APP --prod --no-progress --skip-nx-cache
  artifacts:
    expire_in: 1 hour
    when: always
    paths:
      - 'dist/*'

################################################################
# TEST #
################################################################

test:
  stage: test
  image: node
  interruptible: true
  allow_failure: false
  rules:
    - if: $CI_COMMIT_TAG == null
      when: always    
  script:
    - *setup-base
    - git fetch --all
    - yarn set version berry
    - yarn run affected:test --base=$BASE

test:release:
  stage: test
  image: node
  interruptible: true
  allow_failure: false
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always    
  script:
    - *parse-tag
    - yarn set version berry
    - yarn run nx test $APP

################################################################
# PACKAGE #
################################################################

# package:
#   stage: package
#   extends:
#     - .docker-package-management
#   dependencies: 
#     - build
#   rules:
#     - if: $CI_COMMIT_TAG == null
#       when: always    
#   script:
#     - *setup-base
#     - yarn run affected:docker --base=$BASE --registry=registry.gitlab.com/sonny.miel/sonnymiel.com 

# package:release:
#   stage: package
#   extends:
#     - .docker-package-management
#   dependencies: 
#     - build:release
#   rules:
#     - if: $CI_COMMIT_TAG != null
#       when: always    
#   script:
#     - *parse-tag
#     - yarn run nx -- run $APP:docker --registry=registry.gitlab.com/sonny.miel/sonnymiel.com --version=$VERSION


# ################################################################
# # DEPLOY #
# ################################################################

# deploy:
#   stage: deploy
#   extends:
#   - .ssh_management
#   dependencies:
#     - package
#   rules:
#     - if: $CI_COMMIT_TAG == null
#       when: always    
#   script:
#     - *setup-base
#     - yarn run affected:deploy --ip=$VPS_IP --base=$BASE 
